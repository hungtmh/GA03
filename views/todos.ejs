<!DOCTYPE html>
<html lang="en">

<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title><%= title %></title>
  <script src="https://cdn.jsdelivr.net/npm/@tailwindcss/browser@4"></script>
</head>

<body class="bg-gradient-to-br from-blue-50 to-indigo-100 min-h-screen">
  <!-- Header -->
  <header class="bg-white shadow-md">
    <nav class="container mx-auto px-4 py-4">
      <div class="flex items-center justify-between">
        <h1 class="text-2xl font-bold text-indigo-600">‚úì TODO App</h1>
        <div class="space-x-4">
          <a href="/" class="text-gray-600 hover:text-indigo-600 transition">Home</a>
          <a href="/todos" class="text-indigo-600 font-semibold hover:text-indigo-800 transition">My TODOs</a>
        </div>
      </div>
    </nav>
  </header>

  <!-- Main Content -->
  <main class="container mx-auto px-4 py-8">
    <div class="max-w-3xl mx-auto">
      <!-- Page Title -->
      <div class="text-center mb-8">
        <h2 class="text-3xl md:text-4xl font-bold text-gray-800 mb-2">My TODO List</h2>
        <p class="text-gray-600">Keep track of your tasks and stay organized</p>
      </div>

      <!-- Add TODO Form -->
      <div class="bg-white rounded-xl shadow-lg p-6 mb-6">
        <h3 class="text-xl font-bold text-gray-800 mb-4">Add New Task</h3>
        <form id="addTodoForm" class="flex flex-col sm:flex-row gap-3">
          <input 
            type="text" 
            id="todoInput" 
            placeholder="Enter a new task..."
            class="flex-1 px-4 py-3 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-indigo-500 focus:border-transparent"
            required
          />
          <button 
            type="submit"
            class="bg-indigo-600 text-white px-6 py-3 rounded-lg font-semibold hover:bg-indigo-700 transform hover:scale-105 transition duration-200 shadow-md whitespace-nowrap"
          >
            ‚ûï Add Task
          </button>
        </form>
      </div>

      <!-- Statistics -->
      <div class="grid grid-cols-2 md:grid-cols-4 gap-4 mb-6">
        <div class="bg-white rounded-lg shadow p-4 text-center">
          <div class="text-2xl font-bold text-indigo-600" id="totalCount">0</div>
          <div class="text-sm text-gray-600">Total</div>
        </div>
        <div class="bg-white rounded-lg shadow p-4 text-center">
          <div class="text-2xl font-bold text-yellow-600" id="activeCount">0</div>
          <div class="text-sm text-gray-600">Active</div>
        </div>
        <div class="bg-white rounded-lg shadow p-4 text-center">
          <div class="text-2xl font-bold text-green-600" id="completedCount">0</div>
          <div class="text-sm text-gray-600">Completed</div>
        </div>
        <div class="bg-white rounded-lg shadow p-4 text-center">
          <div class="text-2xl font-bold text-purple-600" id="progressPercent">0%</div>
          <div class="text-sm text-gray-600">Progress</div>
        </div>
      </div>

      <!-- Filter Buttons -->
      <div class="bg-white rounded-xl shadow-lg p-4 mb-6">
        <div class="flex flex-wrap gap-2 justify-center">
          <button onclick="filterTodos('all')" 
                  class="filter-btn px-4 py-2 rounded-lg font-semibold transition active bg-indigo-600 text-white"
                  data-filter="all">
            All Tasks
          </button>
          <button onclick="filterTodos('active')" 
                  class="filter-btn px-4 py-2 rounded-lg font-semibold transition bg-gray-200 text-gray-700 hover:bg-gray-300"
                  data-filter="active">
            Active
          </button>
          <button onclick="filterTodos('completed')" 
                  class="filter-btn px-4 py-2 rounded-lg font-semibold transition bg-gray-200 text-gray-700 hover:bg-gray-300"
                  data-filter="completed">
            Completed
          </button>
        </div>
      </div>

      <!-- TODO List -->
      <div class="bg-white rounded-xl shadow-lg p-6">
        <h3 class="text-xl font-bold text-gray-800 mb-4">Tasks</h3>
        <div id="todoList" class="space-y-3">
          <!-- Loading state -->
          <div class="text-center py-8 text-gray-500">
            <div class="animate-pulse">Loading tasks...</div>
          </div>
        </div>
        
        <!-- Empty state -->
        <div id="emptyState" class="hidden text-center py-8">
          <div class="text-6xl mb-4">üìù</div>
          <p class="text-gray-600 text-lg">No tasks yet. Add your first task above!</p>
        </div>
      </div>
    </div>
  </main>

  <!-- Footer -->
  <footer class="bg-white mt-12 py-6 shadow-inner">
    <div class="container mx-auto px-4 text-center text-gray-600">
      <p>¬© 2025 TODO App - GA03 Assignment</p>
    </div>
  </footer>

  <!-- JavaScript -->
  <script>
    let todos = [];
    let currentFilter = 'all';

    // Load todos when page loads
    document.addEventListener('DOMContentLoaded', () => {
      loadTodos();
      setupEventListeners();
    });

    // Setup event listeners
    function setupEventListeners() {
      const form = document.getElementById('addTodoForm');
      form.addEventListener('submit', async (e) => {
        e.preventDefault();
        await addTodo();
      });
    }

    // Load todos from API
    async function loadTodos() {
      try {
        const response = await fetch('/api/todos');
        if (!response.ok) throw new Error('Failed to load todos');
        
        todos = await response.json();
        renderTodoList();
        updateStatistics();
      } catch (error) {
        console.error('Error loading todos:', error);
        showError('Failed to load tasks. Please refresh the page.');
      }
    }

    // Add new todo
    async function addTodo() {
      const input = document.getElementById('todoInput');
      const title = input.value.trim();

      if (!title) {
        showError('Please enter a task title');
        return;
      }

      try {
        const response = await fetch('/api/todos', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
          },
          body: JSON.stringify({ title }),
        });

        if (!response.ok) throw new Error('Failed to add todo');

        const newTodo = await response.json();
        todos.push(newTodo);
        
        input.value = '';
        renderTodoList();
        updateStatistics();
        showSuccess('Task added successfully!');
      } catch (error) {
        console.error('Error adding todo:', error);
        showError('Failed to add task. Please try again.');
      }
    }

    // Toggle todo completion
    async function toggleTodo(id) {
      const todo = todos.find(t => t.id === id);
      if (!todo) return;

      try {
        const response = await fetch(`/api/todos/${id}`, {
          method: 'PUT',
          headers: {
            'Content-Type': 'application/json',
          },
          body: JSON.stringify({ completed: !todo.completed }),
        });

        if (!response.ok) throw new Error('Failed to update todo');

        const updatedTodo = await response.json();
        const index = todos.findIndex(t => t.id === id);
        todos[index] = updatedTodo;
        
        renderTodoList();
        updateStatistics();
      } catch (error) {
        console.error('Error toggling todo:', error);
        showError('Failed to update task. Please try again.');
      }
    }

    // Remove todo
    async function removeTodo(id) {
      if (!confirm('Are you sure you want to delete this task?')) {
        return;
      }

      try {
        const response = await fetch(`/api/todos/${id}`, {
          method: 'DELETE',
        });

        if (!response.ok) throw new Error('Failed to delete todo');

        todos = todos.filter(t => t.id !== id);
        
        renderTodoList();
        updateStatistics();
        showSuccess('Task deleted successfully!');
      } catch (error) {
        console.error('Error removing todo:', error);
        showError('Failed to delete task. Please try again.');
      }
    }

    // Filter todos
    function filterTodos(filter) {
      currentFilter = filter;
      
      // Update button styles
      const buttons = document.querySelectorAll('.filter-btn');
      buttons.forEach(btn => {
        if (btn.dataset.filter === filter) {
          btn.classList.remove('bg-gray-200', 'text-gray-700', 'hover:bg-gray-300');
          btn.classList.add('bg-indigo-600', 'text-white', 'active');
        } else {
          btn.classList.remove('bg-indigo-600', 'text-white', 'active');
          btn.classList.add('bg-gray-200', 'text-gray-700', 'hover:bg-gray-300');
        }
      });
      
      renderTodoList();
    }

    // Render todo list
    function renderTodoList() {
      const todoList = document.getElementById('todoList');
      const emptyState = document.getElementById('emptyState');

      // Filter todos based on current filter
      let filteredTodos = todos;
      if (currentFilter === 'active') {
        filteredTodos = todos.filter(t => !t.completed);
      } else if (currentFilter === 'completed') {
        filteredTodos = todos.filter(t => t.completed);
      }

      if (filteredTodos.length === 0) {
        todoList.innerHTML = '';
        emptyState.classList.remove('hidden');
        return;
      }

      emptyState.classList.add('hidden');

      todoList.innerHTML = filteredTodos.map(todo => `
        <div class="flex items-center gap-3 p-4 border border-gray-200 rounded-lg hover:shadow-md transition ${todo.completed ? 'bg-gray-50' : 'bg-white'}">
          <!-- Checkbox -->
          <button 
            onclick="toggleTodo(${todo.id})"
            class="flex-shrink-0 w-6 h-6 rounded border-2 ${todo.completed ? 'bg-green-500 border-green-500' : 'border-gray-300 hover:border-indigo-500'} flex items-center justify-center transition"
            aria-label="${todo.completed ? 'Mark as incomplete' : 'Mark as complete'}"
          >
            ${todo.completed ? '<span class="text-white text-sm">‚úì</span>' : ''}
          </button>
          
          <!-- Title -->
          <div class="flex-1 ${todo.completed ? 'line-through text-gray-500' : 'text-gray-800'}">
            ${escapeHtml(todo.title)}
          </div>
          
          <!-- Status Badge -->
          <span class="hidden sm:inline-block px-3 py-1 text-xs font-semibold rounded-full ${todo.completed ? 'bg-green-100 text-green-800' : 'bg-yellow-100 text-yellow-800'}">
            ${todo.completed ? '‚úì Done' : '‚óã Active'}
          </span>
          
          <!-- Delete Button -->
          <button 
            onclick="removeTodo(${todo.id})"
            class="flex-shrink-0 text-red-500 hover:text-red-700 hover:bg-red-50 p-2 rounded transition"
            aria-label="Delete task"
          >
            <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 7l-.867 12.142A2 2 0 0116.138 21H7.862a2 2 0 01-1.995-1.858L5 7m5 4v6m4-6v6m1-10V4a1 1 0 00-1-1h-4a1 1 0 00-1 1v3M4 7h16"></path>
            </svg>
          </button>
        </div>
      `).join('');
    }

    // Update statistics
    function updateStatistics() {
      const total = todos.length;
      const completed = todos.filter(t => t.completed).length;
      const active = total - completed;
      const progress = total > 0 ? Math.round((completed / total) * 100) : 0;

      document.getElementById('totalCount').textContent = total;
      document.getElementById('activeCount').textContent = active;
      document.getElementById('completedCount').textContent = completed;
      document.getElementById('progressPercent').textContent = progress + '%';
    }

    // Utility function to escape HTML
    function escapeHtml(text) {
      const div = document.createElement('div');
      div.textContent = text;
      return div.innerHTML;
    }

    // Show error message
    function showError(message) {
      alert('‚ùå ' + message);
    }

    // Show success message
    function showSuccess(message) {
      // Simple success feedback - could be enhanced with toast notifications
      console.log('‚úì ' + message);
    }
  </script>
</body>

</html>
